import asyncio
import logging
from uuid import uuid4

import aiohttp
from cloudevents.conversion import to_structured
from cloudevents.http import CloudEvent

from hpe_glcp_automation_lib.libs.audit_logs.app_api.audit_trail_app_api import (
    AuditTrailAppApiClient,
)

log = logging.getLogger(__name__)


class ATAppAPIHelper(AuditTrailAppApiClient):
    """
    Audit Trail APP API Helper Class
    """

    def __init__(self, host, sso_host, client_id, client_secret):
        log.info("Initializing Audit Trail Helper for APP Api calls")
        super().__init__(host, sso_host, client_id, client_secret)
        self.token = self.get_token()
        self._loop = asyncio.get_event_loop()

    async def __send_audit_event(self, dest_url, audit_log: dict, source="CCS"):
        """
        Sends Audit Event to CCS Msg Infra.
        :param dest_url: Desitnation url to which the audit event needs to be published
        :param audit_log: the publish payload in dict/json format
        :param source: source from which event is triggered.
        """

        attributes = {
            "type": "AUDIT_LOGS",
            "id": str(uuid4()),  # autogenerated
            "source": source,  # set as CCS
        }

        event = CloudEvent(attributes, audit_log)
        headers, body = to_structured(event)

        if self.token is not None:
            headers["Authorization"] = f"Bearer {self.token}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    dest_url, data=body, headers=headers, timeout=3
                ) as r:
                    status_code = r.status
                    response = await r.text()
                    if status_code == 200:
                        return 200

                    log.error(
                        f"Error while sending audit event to DB. Status_code={status_code}"
                        f"Response={response}"
                    )
                    return status_code
        except Exception as e:
            log.error(f"Error while sending audit event to DB. error={str(e)}")
            return str(e)

    def send_audit_logs(self, dest_url, audit_log: dict, source="CCS"):
        """
        Initializes a loop tp send audit event to CCS Msg Infra unit the task is complete.
        :param dest_url: Desitnation url to which the audit event needs to be published
        :param audit_log: the publish payload in dict/json format
        :param source: source from which event is triggered.
        """
        result = self._loop.run_until_complete(
            self.__send_audit_event(dest_url, audit_log, source)
        )
        return result
